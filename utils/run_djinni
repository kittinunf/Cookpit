#!/usr/bin/env bash
shopt -s nullglob

base_dir=$(cd "`dirname "0"`" && pwd)

cpp_out="$base_dir/build/generated-src/cpp"
jni_out="$base_dir/build/generated-src/jni"
objc_out="$base_dir/build/generated-src/objc"
java_out="$base_dir/build/generated-src/java"

app_name="cookpit"
java_package="com.github.kittinunf.$app_name"

namespace="cookpit"
objc_prefix="CP"
djinni_path="djinni"

for file in $(find $djinni_path -type f -name "*.djinni")
do
  echo "Processing $file..."
  vendors/djinni/src/run \
    --java-out $java_out \
    --java-package $java_package \
    --ident-java-field mFooBar \
    \
    --cpp-out $cpp_out \
    --cpp-namespace $namespace \
    --ident-cpp-type foo_bar \
    --ident-cpp-enum-type foo_bar \
    --cpp-optional-header "<experimental/optional>" \
    --cpp-optional-template "std::experimental::optional"\
    \
    --jni-out $jni_out \
    --ident-jni-class NativeFooBar \
    --ident-jni-file NativeFooBar \
    \
    --objc-out $objc_out \
    --objc-type-prefix $objc_prefix \
    \
    --objcpp-out $objc_out \
    \
    --idl $file
  echo "Finish Processing $file..."
done

if [ -f "$file" ]; then
  rm "$jni_out/main.cpp"
fi

write_line_to_file() {
  local file="$jni_out/main.cpp"

  if [ ! -f "$file" ]; then
    touch "$file"
  fi
  echo "$1" >> "$file"
}

write_line_to_file "// AUTOGENERATED FILE - DO NOT MODIFY!"
write_line_to_file "// This file generated by run_djinni for Android"
write_line_to_file ""
write_line_to_file '#include "djinni_support.hpp"'
write_line_to_file ""
write_line_to_file '#include <android/log.h>'
write_line_to_file '#include <iostream>'
write_line_to_file '#include <memory>'
write_line_to_file '#include <streambuf>'
write_line_to_file '#include <vector>'
write_line_to_file ''
write_line_to_file 'class android_streambuf: public std::streambuf {'
write_line_to_file 'public:'
write_line_to_file '    android_streambuf(int log_priority) : _log_priority(log_priority), _buffer(256) {'
write_line_to_file '      auto base = &_buffer.front();'
write_line_to_file '      setp(base, base + _buffer.size());'
write_line_to_file '    }'
write_line_to_file 'private:'
write_line_to_file '    std::streamsize xsputn(const char_type* ch, std::streamsize n) {'
write_line_to_file '      __android_log_print(_log_priority,'
write_line_to_file "                         \"$namespace-native\", \"%s\", std::string(ch, n).c_str());"
write_line_to_file '      return n;'
write_line_to_file '    }'
write_line_to_file ""
write_line_to_file '    int _log_priority;'
write_line_to_file '    std::vector<char> _buffer;'
write_line_to_file '};'
write_line_to_file ""
write_line_to_file "std::unique_ptr<android_streambuf> android_streambuf_ptr;"
write_line_to_file ""
write_line_to_file 'CJNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* jvm, void* /*reserved*/) {'
write_line_to_file '  android_streambuf_ptr = std::make_unique<android_streambuf>(ANDROID_LOG_INFO);'
write_line_to_file '  std::cout.rdbuf(android_streambuf_ptr.get());'
write_line_to_file '  djinni::jniInit(jvm);'
write_line_to_file '  return JNI_VERSION_1_6;'
write_line_to_file '}'
write_line_to_file ""
write_line_to_file 'CJNIEXPORT void JNICALL JNI_OnUnload(JavaVM* /*jvm*/, void* /*reserved*/) {'
write_line_to_file '  android_streambuf_ptr.reset();'
write_line_to_file '  djinni::jniShutdown();'
write_line_to_file '}'

mirror() {
   local prefix="$1" ; shift
   local src="$1" ; shift
   local dest="$1" ; shift
   mkdir -p "$dest"
   rsync -a --delete --checksum --itemize-changes "$src"/ "$dest" | grep -v '^\.' | sed "s/^/[$prefix]/"
}

echo "Copying generated code to final direcories..."
mirror "cpp" "$cpp_out" "cpp/src/gen"
mirror "java" "$java_out" "android/$app_name/java_gen/com/github/kittinunf/cookpit"
mirror "jni" "$jni_out" "android/$app_name/jni_gen"
mirror "objc" "$objc_out" "ios/objc_gen"

echo "run_djinni completed"
